{"version":3,"sources":["ng-iso-currencies.js","filters/ng-iso-currencies-filter.js","services/ng-iso-currencies-service.js"],"names":["angular","module","constant","AFN","text","fraction","symbol","EUR","ALL","DZD","USD","AOA","XCD","ARS","AMD","AWG","AUD","AZN","BSD","BHD","BDT","BBD","BYR","BZD","XOF","BMD","BTN","INR","BOB","BOV","BAM","BWP","NOK","BRL","BND","BGN","BIF","KHR","XAF","CAD","CVE","KYD","CLF","CLP","CNY","COP","COU","KMF","CDF","NZD","CRC","HRK","CUC","CUP","ANG","CZK","DKK","DJF","DOP","EGP","SVC","ERN","ETB","FKP","FJD","XPF","GMD","GEL","GHS","GIP","GTQ","GBP","GNF","GYD","HTG","HNL","HKD","HUF","ISK","IDR","XDR","IRR","IQD","ILS","JMD","JPY","JOD","KZT","KES","KPW","KRW","KWD","KGS","LAK","LBP","LSL","ZAR","LRD","LYD","CHF","LTL","MOP","MKD","MGA","MWK","MYR","MVR","MRO","MUR","XUA","MXN","MXV","MDL","MNT","MAD","MZN","MMK","NAD","NPR","NIO","NGN","OMR","PKR","PAB","PGK","PYG","PEN","PHP","PLN","QAR","RON","RUB","RWF","SHP","WST","STD","SAR","RSD","SCR","SLL","SGD","XSU","SBD","SOS","SSP","LKR","SDG","SRD","SZL","SEK","CHE","CHW","SYP","TWD","TJS","TZS","THB","TOP","TTD","TND","TRY","TMT","UGX","UAH","AED","USN","UYI","UYU","UZS","VUV","VEF","VND","YER","ZMW","ZWL","filter","$filter","isoCurrencyService","Number","prototype","numberFormat","decimals","dec_sep","thousand_sep","decimals_strict","num","this","toFixed","parseFloat","parts","toString","split","replace","join","amount","currencyCode","fraction_strict","position","currency","getCurrencyByCode","isDefined","fractionStrict","decimalSep","thousandSep","amount_fraction","result","provider","isoCurrencyProvider","iso4217Currencies","code","setCurrencyIso4217","toUpperCase","iso_currency","$get","getCurrency","getCode","getText","getFraction","getFractionStrict","getSymbol","getPosition","getDecimalSep","getThousandSep","setByCode","setCode","setText","isString","setFraction","isNumber","setFractionStrict","setSymbol","setPosition","setDecimalSep","setThousandSep","factory","isoCurrencies","_set_currency_iso4217","copy","setCurrencyByCode"],"mappings":"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","file":"ng-iso-currencies.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    //Create module iso currencies\n    var module = angular.module('isoCurrencies', []);\n\n\n    /**\n     * Constant\n     */\n    module.constant( 'iso4217Currencies', {\n        'AFN': {\n            text: 'Afghani',\n            fraction: 2,\n            symbol: '؋'\n        },\n        'EUR': {\n            text: 'Euro',\n            fraction: 2,\n            symbol: '€'\n        },\n        'ALL': {\n            text: 'Lek',\n            fraction: 2,\n            symbol: 'Lek'\n        },\n        'DZD': {\n            text: 'Algerian Dinar',\n            fraction: 2,\n            symbol: false\n        },\n        'USD': {\n            text: 'US Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'AOA': {\n            text: 'Kwanza',\n            fraction: 2,\n            symbol: false\n        },\n        'XCD': {\n            text: 'East Caribbean Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'ARS': {\n            text: 'Argentine Peso',\n            fraction: 2,\n            symbol: '$'\n        },\n        'AMD': {\n            text: 'Armenian Dram',\n            fraction: 2,\n            symbol: false\n        },\n        'AWG': {\n            text: 'Aruban Florin',\n            fraction: 2,\n            symbol: 'ƒ'\n        },\n        'AUD': {\n            text: 'Australian Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'AZN': {\n            text: 'Azerbaijanian Manat',\n            fraction: 2,\n            symbol: 'ман'\n        },\n        'BSD': {\n            text: 'Bahamian Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'BHD': {\n            text: 'Bahraini Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'BDT': {\n            text: 'Taka',\n            fraction: 2,\n            symbol: false\n        },\n        'BBD': {\n            text: 'Barbados Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'BYR': {\n            text: 'Belarussian Ruble',\n            fraction: 0,\n            symbol: 'p.'\n        },\n        'BZD': {\n            text: 'Belize Dollar',\n            fraction: 2,\n            symbol: 'BZ$'\n        },\n        'XOF': {\n            text: 'CF Franc BCEAO',\n            fraction: 0,\n            symbol: false\n        },\n        'BMD': {\n            text: 'Bermudian Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'BTN': {\n            text: 'Ngultrum',\n            fraction: 2,\n            symbol: false\n        },\n        'INR': {\n            text: 'Indian Rupee',\n            fraction: 2,\n            symbol: ''\n        },\n        'BOB': {\n            text: 'Boliviano',\n            fraction: 2,\n            symbol: '$b'\n        },\n        'BOV': {\n            text: 'Mvdol',\n            fraction: 2,\n            symbol: false\n        },\n        'BAM': {\n            text: 'Convertible Mark',\n            fraction: 2,\n            symbol: 'KM'\n        },\n        'BWP': {\n            text: 'Pula',\n            fraction: 2,\n            symbol: 'P'\n        },\n        'NOK': {\n            text: 'Norwegian Krone',\n            fraction: 2,\n            symbol: 'kr'\n        },\n        'BRL': {\n            text: 'Brazilian Real',\n            fraction: 2,\n            symbol: 'R$'\n        },\n        'BND': {\n            text: 'Brunei Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'BGN': {\n            text: 'Bulgarian Lev',\n            fraction: 2,\n            symbol: 'лв'\n        },\n        'BIF': {\n            text: 'Burundi Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'KHR': {\n            text: 'Riel',\n            fraction: 2,\n            symbol: '៛'\n        },\n        'XAF': {\n            text: 'CF Franc BEAC',\n            fraction: 0,\n            symbol: false\n        },\n        'CAD': {\n            text: 'Canadian Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'CVE': {\n            text: 'Cabo Verde Escudo',\n            fraction: 2,\n            symbol: false\n        },\n        'KYD': {\n            text: 'Cayman Islands Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'CLF': {\n            text: 'Unidad de Fomento',\n            fraction: 4,\n            symbol: false\n        },\n        'CLP': {\n            text: 'Chilean Peso',\n            fraction: 0,\n            symbol: '$'\n        },\n        'CNY': {\n            text: 'Yuan Renminbi',\n            fraction: 2,\n            symbol: '¥'\n        },\n        'COP': {\n            text: 'Colombian Peso',\n            fraction: 2,\n            symbol: '$'\n        },\n        'COU': {\n            text: 'Unidad de Valor Real',\n            fraction: 2,\n            symbol: false\n        },\n        'KMF': {\n            text: 'Comoro Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'CDF': {\n            text: 'Congolese Franc',\n            fraction: 2,\n            symbol: false\n        },\n        'NZD': {\n            text: 'New Zealand Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'CRC': {\n            text: 'Cost Rican Colon',\n            fraction: 2,\n            symbol: '₡'\n        },\n        'HRK': {\n            text: 'Croatian Kuna',\n            fraction: 2,\n            symbol: 'kn'\n        },\n        'CUC': {\n            text: 'Peso Convertible',\n            fraction: 2,\n            symbol: false\n        },\n        'CUP': {\n            text: 'Cuban Peso',\n            fraction: 2,\n            symbol: '₱'\n        },\n        'ANG': {\n            text: 'Netherlands Antillean Guilder',\n            fraction: 2,\n            symbol: 'ƒ'\n        },\n        'CZK': {\n            text: 'Czech Koruna',\n            fraction: 2,\n            symbol: 'Kč'\n        },\n        'DKK': {\n            text: 'Danish Krone',\n            fraction: 2,\n            symbol: 'kr'\n        },\n        'DJF': {\n            text: 'Djibouti Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'DOP': {\n            text: 'Dominican Peso',\n            fraction: 2,\n            symbol: 'RD$'\n        },\n        'EGP': {\n            text: 'Egyptian Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'SVC': {\n            text: 'El Salvador Colon',\n            fraction: 2,\n            symbol: '$'\n        },\n        'ERN': {\n            text: 'Nakfa',\n            fraction: 2,\n            symbol: false\n        },\n        'ETB': {\n            text: 'Ethiopian Birr',\n            fraction: 2,\n            symbol: false\n        },\n        'FKP': {\n            text: 'Falkland Islands Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'FJD': {\n            text: 'Fiji Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'XPF': {\n            text: 'CFP Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'GMD': {\n            text: 'Dalasi',\n            fraction: 2,\n            symbol: false\n        },\n        'GEL': {\n            text: 'Lari',\n            fraction: 2,\n            symbol: false\n        },\n        'GHS': {\n            text: 'Ghan Cedi',\n            fraction: 2,\n            symbol: false\n        },\n        'GIP': {\n            text: 'Gibraltar Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'GTQ': {\n            text: 'Quetzal',\n            fraction: 2,\n            symbol: 'Q'\n        },\n        'GBP': {\n            text: 'Pound Sterling',\n            fraction: 2,\n            symbol: '£'\n        },\n        'GNF': {\n            text: 'Guine Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'GYD': {\n            text: 'Guyan Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'HTG': {\n            text: 'Gourde',\n            fraction: 2,\n            symbol: false\n        },\n        'HNL': {\n            text: 'Lempira',\n            fraction: 2,\n            symbol: 'L'\n        },\n        'HKD': {\n            text: 'Hong Kong Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'HUF': {\n            text: 'Forint',\n            fraction: 2,\n            symbol: 'Ft'\n        },\n        'ISK': {\n            text: 'Iceland Krona',\n            fraction: 0,\n            symbol: 'kr'\n        },\n        'IDR': {\n            text: 'Rupiah',\n            fraction: 2,\n            symbol: 'Rp'\n        },\n        'XDR': {\n            text: 'SDR (Special Drawing Right)',\n            fraction: 0,\n            symbol: false\n        },\n        'IRR': {\n            text: 'Iranian Rial',\n            fraction: 2,\n            symbol: '﷼'\n        },\n        'IQD': {\n            text: 'Iraqi Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'ILS': {\n            text: 'New Israeli Sheqel',\n            fraction: 2,\n            symbol: '₪'\n        },\n        'JMD': {\n            text: 'Jamaican Dollar',\n            fraction: 2,\n            symbol: 'J$'\n        },\n        'JPY': {\n            text: 'Yen',\n            fraction: 0,\n            symbol: '¥'\n        },\n        'JOD': {\n            text: 'Jordanian Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'KZT': {\n            text: 'Tenge',\n            fraction: 2,\n            symbol: 'лв'\n        },\n        'KES': {\n            text: 'Kenyan Shilling',\n            fraction: 2,\n            symbol: false\n        },\n        'KPW': {\n            text: 'North Korean Won',\n            fraction: 2,\n            symbol: '₩'\n        },\n        'KRW': {\n            text: 'Won',\n            fraction: 0,\n            symbol: '₩'\n        },\n        'KWD': {\n            text: 'Kuwaiti Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'KGS': {\n            text: 'Som',\n            fraction: 2,\n            symbol: 'лв'\n        },\n        'LAK': {\n            text: 'Kip',\n            fraction: 2,\n            symbol: '₭'\n        },\n        'LBP': {\n            text: 'Lebanese Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'LSL': {\n            text: 'Loti',\n            fraction: 2,\n            symbol: false\n        },\n        'ZAR': {\n            text: 'Rand',\n            fraction: 2,\n            symbol: 'R'\n        },\n        'LRD': {\n            text: 'Liberian Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'LYD': {\n            text: 'Libyan Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'CHF': {\n            text: 'Swiss Franc',\n            fraction: 2,\n            symbol: 'CHF'\n        },\n        'LTL': {\n            text: 'Lithuanian Litas',\n            fraction: 2,\n            symbol: 'Lt'\n        },\n        'MOP': {\n            text: 'Pataca',\n            fraction: 2,\n            symbol: false\n        },\n        'MKD': {\n            text: 'Denar',\n            fraction: 2,\n            symbol: 'ден'\n        },\n        'MGA': {\n            text: 'Malagasy riary',\n            fraction: 2,\n            symbol: false\n        },\n        'MWK': {\n            text: 'Kwacha',\n            fraction: 2,\n            symbol: false\n        },\n        'MYR': {\n            text: 'Malaysian Ringgit',\n            fraction: 2,\n            symbol: 'RM'\n        },\n        'MVR': {\n            text: 'Rufiyaa',\n            fraction: 2,\n            symbol: false\n        },\n        'MRO': {\n            text: 'Ouguiya',\n            fraction: 2,\n            symbol: false\n        },\n        'MUR': {\n            text: 'Mauritius Rupee',\n            fraction: 2,\n            symbol: '₨'\n        },\n        'XUA': {\n            text: 'ADB Unit of ccount',\n            fraction: 0,\n            symbol: false\n        },\n        'MXN': {\n            text: 'Mexican Peso',\n            fraction: 2,\n            symbol: '$'\n        },\n        'MXV': {\n            text: 'Mexican Unidad de Inversion (UDI)',\n            fraction: 2,\n            symbol: false\n        },\n        'MDL': {\n            text: 'Moldovan Leu',\n            fraction: 2,\n            symbol: false\n        },\n        'MNT': {\n            text: 'Tugrik',\n            fraction: 2,\n            symbol: '₮'\n        },\n        'MAD': {\n            text: 'Moroccan Dirham',\n            fraction: 2,\n            symbol: false\n        },\n        'MZN': {\n            text: 'Mozambique Metical',\n            fraction: 2,\n            symbol: 'MT'\n        },\n        'MMK': {\n            text: 'Kyat',\n            fraction: 2,\n            symbol: false\n        },\n        'NAD': {\n            text: 'Namibi Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'NPR': {\n            text: 'Nepalese Rupee',\n            fraction: 2,\n            symbol: '₨'\n        },\n        'NIO': {\n            text: 'Cordob Oro',\n            fraction: 2,\n            symbol: 'C$'\n        },\n        'NGN': {\n            text: 'Naira',\n            fraction: 2,\n            symbol: '₦'\n        },\n        'OMR': {\n            text: 'Rial Omani',\n            fraction: 3,\n            symbol: '﷼'\n        },\n        'PKR': {\n            text: 'Pakistan Rupee',\n            fraction: 2,\n            symbol: '₨'\n        },\n        'PAB': {\n            text: 'Balboa',\n            fraction: 2,\n            symbol: 'B/.'\n        },\n        'PGK': {\n            text: 'Kina',\n            fraction: 2,\n            symbol: false\n        },\n        'PYG': {\n            text: 'Guarani',\n            fraction: 0,\n            symbol: 'Gs'\n        },\n        'PEN': {\n            text: 'Nuevo Sol',\n            fraction: 2,\n            symbol: 'S/.'\n        },\n        'PHP': {\n            text: 'Philippine Peso',\n            fraction: 2,\n            symbol: '₱'\n        },\n        'PLN': {\n            text: 'Zloty',\n            fraction: 2,\n            symbol: 'zł'\n        },\n        'QAR': {\n            text: 'Qatari Rial',\n            fraction: 2,\n            symbol: '﷼'\n        },\n        'RON': {\n            text: 'New Romanian Leu',\n            fraction: 2,\n            symbol: 'lei'\n        },\n        'RUB': {\n            text: 'Russian Ruble',\n            fraction: 2,\n            symbol: 'руб'\n        },\n        'RWF': {\n            text: 'Rwand Franc',\n            fraction: 0,\n            symbol: false\n        },\n        'SHP': {\n            text: 'Saint Helen Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'WST': {\n            text: 'Tala',\n            fraction: 2,\n            symbol: false\n        },\n        'STD': {\n            text: 'Dobra',\n            fraction: 2,\n            symbol: false\n        },\n        'SAR': {\n            text: 'Saudi Riyal',\n            fraction: 2,\n            symbol: '﷼'\n        },\n        'RSD': {\n            text: 'Serbian Dinar',\n            fraction: 2,\n            symbol: 'Дин.'\n        },\n        'SCR': {\n            text: 'Seychelles Rupee',\n            fraction: 2,\n            symbol: '₨'\n        },\n        'SLL': {\n            text: 'Leone',\n            fraction: 2,\n            symbol: false\n        },\n        'SGD': {\n            text: 'Singapore Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'XSU': {\n            text: 'Sucre',\n            fraction: 0,\n            symbol: false\n        },\n        'SBD': {\n            text: 'Solomon Islands Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'SOS': {\n            text: 'Somali Shilling',\n            fraction: 2,\n            symbol: 'S'\n        },\n        'SSP': {\n            text: 'South Sudanese Pound',\n            fraction: 2,\n            symbol: false\n        },\n        'LKR': {\n            text: 'Sri Lank Rupee',\n            fraction: 2,\n            symbol: '₨'\n        },\n        'SDG': {\n            text: 'Sudanese Pound',\n            fraction: 2,\n            symbol: false\n        },\n        'SRD': {\n            text: 'Surinam Dollar',\n            fraction: 2,\n            symbol: '$'\n        },\n        'SZL': {\n            text: 'Lilangeni',\n            fraction: 2,\n            symbol: false\n        },\n        'SEK': {\n            text: 'Swedish Krona',\n            fraction: 2,\n            symbol: 'kr'\n        },\n        'CHE': {\n            text: 'WIR Euro',\n            fraction: 2,\n            symbol: false\n        },\n        'CHW': {\n            text: 'WIR Franc',\n            fraction: 2,\n            symbol: false\n        },\n        'SYP': {\n            text: 'Syrian Pound',\n            fraction: 2,\n            symbol: '£'\n        },\n        'TWD': {\n            text: 'New Taiwan Dollar',\n            fraction: 2,\n            symbol: 'NT$'\n        },\n        'TJS': {\n            text: 'Somoni',\n            fraction: 2,\n            symbol: false\n        },\n        'TZS': {\n            text: 'Tanzanian Shilling',\n            fraction: 2,\n            symbol: false\n        },\n        'THB': {\n            text: 'Baht',\n            fraction: 2,\n            symbol: '฿'\n        },\n        'TOP': {\n            text: 'Pa’anga',\n            fraction: 2,\n            symbol: false\n        },\n        'TTD': {\n            text: 'Trinidad nd Tobago Dollar',\n            fraction: 2,\n            symbol: 'TT$'\n        },\n        'TND': {\n            text: 'Tunisian Dinar',\n            fraction: 3,\n            symbol: false\n        },\n        'TRY': {\n            text: 'Turkish Lira',\n            fraction: 2,\n            symbol: '₺'\n        },\n        'TMT': {\n            text: 'Turkmenistan New Manat',\n            fraction: 2,\n            symbol: false\n        },\n        'UGX': {\n            text: 'Ugand Shilling',\n            fraction: 0,\n            symbol: false\n        },\n        'UAH': {\n            text: 'Hryvnia',\n            fraction: 2,\n            symbol: '₴'\n        },\n        'AED': {\n            text: 'UAE Dirham',\n            fraction: 2,\n            symbol: false\n        },\n        'USN': {\n            text: 'US Dollar (Next day)',\n            fraction: 2,\n            symbol: false\n        },\n        'UYI': {\n            text: 'Uruguay Peso en Unidades Indexadas (URUIURUI)',\n            fraction: 0,\n            symbol: false\n        },\n        'UYU': {\n            text: 'Peso Uruguayo',\n            fraction: 2,\n            symbol: '$U'\n        },\n        'UZS': {\n            text: 'Uzbekistan Sum',\n            fraction: 2,\n            symbol: 'лв'\n        },\n        'VUV': {\n            text: 'Vatu',\n            fraction: 0,\n            symbol: false\n        },\n        'VEF': {\n            text: 'Bolivar',\n            fraction: 2,\n            symbol: 'Bs'\n        },\n        'VND': {\n            text: 'Dong',\n            fraction: 0,\n            symbol: '₫'\n        },\n        'YER': {\n            text: 'Yemeni Rial',\n            fraction: 2,\n            symbol: '﷼'\n        },\n        'ZMW': {\n            text: 'Zambian Kwacha',\n            fraction: 2,\n            symbol: false\n        },\n        'ZWL': {\n            text: 'Zimbabwe Dollar',\n            fraction: 2,\n            symbol: false\n        }\n    });\n\n\n})(angular);","\n(function (angular) {\n    'use strict';\n\n    //Load module\n    var module = angular.module('isoCurrencies');\n\n\n    /**\n     * Filter\n     */\n    module.filter('isoCurrency', ['$filter', 'isoCurrencyService', function($filter, isoCurrencyService) {\n\n\n\n        Number.prototype.numberFormat = function(decimals, dec_sep, thousand_sep, decimals_strict) {\n            dec_sep = typeof dec_sep !== 'undefined' ? dec_sep : '.';\n            thousand_sep = typeof thousand_sep !== 'undefined' ? thousand_sep : ',';\n\n            var num = this.toFixed(decimals);\n            num = !decimals_strict ? parseFloat(num) : num;\n\n            var parts = num.toString().split('.');\n\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousand_sep);\n\n            return  parts.join(dec_sep);\n        };\n\n\n        /**\n         * transforms an amount into the right format and currency according to a passed currency code (3 chars).\n         *\n         * @param float amount\n         * @param string currencyCode e.g. EUR, USD\n         * @param number fraction User specified fraction size that overwrites default value\n         * @return string\n         */\n        return function(amount, currencyCode, fraction, fraction_strict, dec_sep, thousand_sep, position) {\n\n            var currency = isoCurrencyService.getCurrencyByCode(currencyCode);\n\n            //Get the size fraction\n            if (angular.isDefined(fraction)) {\n                currency.fraction = fraction;\n            }\n\n            //Get the decimal strict\n            if (angular.isDefined(fraction_strict)) {\n                currency.fractionStrict = fraction_strict;\n            }\n\n            //Get the decimal separator\n            if (angular.isDefined(dec_sep)) {\n                currency.decimalSep = dec_sep;\n            }\n\n            //Get the thousand separator\n            if (angular.isDefined(thousand_sep)) {\n                currency.thousandSep = thousand_sep;\n            }\n\n            //Get the position\n            if (angular.isDefined(position)) {\n                currency.position = position;\n            }\n\n\n            //format number fraction size, decimal separator and thousand separator\n            var amount_fraction = parseFloat(amount).numberFormat(currency.fraction, currency.decimalSep, currency.thousandSep, currency.fractionStrict);\n\n            var result = '';\n\n            switch (currency.position) {\n                case 'left' :\n                    result = currency.symbol + amount_fraction;\n                    break;\n                case 'right' :\n                    result = amount_fraction + currency.symbol;\n                    break;\n                case 'left_space' :\n                    result = currency.symbol + '\\u00A0' + amount_fraction;\n                    break;\n                case 'right_space' :\n                    result = amount_fraction + '\\u00A0' + currency.symbol;\n                    break;\n            }\n\n            return result;\n        };\n\n    }]);\n\n\n}(angular));\n","(function (angular) {\n    'use strict';\n\n    //Load module\n    var module = angular.module('isoCurrencies');\n\n\n    /**\n     * Config Provider\n     */\n    module.provider('isoCurrencies', ['iso4217Currencies', function isoCurrencyProvider( iso4217Currencies ) {\n\n        this.code = 'USD';\n        this.text = 'US Dollar';\n        this.fraction = 2;\n        this.fractionStrict = false;\n        this.symbol = '$';\n        this.position = 'left';\n        this.decimalSep = '.';\n        this.thousandSep = ',';\n\n        this.setCurrencyIso4217 = function(code) {\n            if (code) {\n                this.code = code.toUpperCase();\n            }\n\n            var iso_currency = iso4217Currencies[this.code];\n\n            this.text = iso_currency.text;\n            this.fraction = iso_currency.fraction;\n            this.symbol = iso_currency.symbol;\n        };\n\n        this.setCurrencyIso4217();\n\n        this.$get = [ function() {\n\n            var currency = {\n                code:         this.code,\n                text:         this.text,\n                fraction:     this.fraction,\n                fractionStrict: this.fractionStrict,\n                symbol:       this.symbol,\n                position:     this.position,\n                decimalSep:   this.decimalSep,\n                thousandSep:  this.thousandSep\n            };\n\n            return {\n                getCurrency: function () {\n                    return currency;\n                },\n                getCode: function() {\n                    return currency.code;\n                },\n                getText: function() {\n                    return currency.text;\n                },\n                getFraction: function() {\n                    return currency.fraction;\n                },\n                getFractionStrict: function() {\n                    return currency.fractionStrict;\n                },\n                getSymbol: function() {\n                    return currency.symbol;\n                },\n                getPosition: function() {\n                    return currency.position;\n                },\n                getDecimalSep: function() {\n                    return currency.decimalSep;\n                },\n                getThousandSep: function() {\n                    return currency.thousandSep;\n                }\n            };\n        }];\n\n\n        this.setByCode = function(code) {\n            this.setCurrencyIso4217(code);\n        };\n\n        this.setCode = function(code) {\n            this.code = code.toUpperCase() || this.code;\n        };\n\n        this.setText = function(text) {\n            if (angular.isDefined(text) && angular.isString(text)) {\n                this.text = text;\n            }\n        };\n\n        this.setFraction = function(fraction) {\n            if (angular.isDefined(fraction) && angular.isNumber(fraction)) {\n                this.fraction = fraction;\n            }\n        };\n\n        this.setFractionStrict = function(fractionStrict) {\n            if (angular.isDefined(fractionStrict)) {\n                this.fractionStrict = !fractionStrict ? false : true;\n            }\n        };\n\n        this.setSymbol = function(symbol) {\n            if (angular.isDefined(symbol)) {\n                this.symbol = symbol;\n            }\n        };\n\n        this.setPosition = function(position) {\n            if (angular.isDefined(position) && angular.isString(position)) {\n                this.position = position;\n            }\n        };\n\n        this.setDecimalSep = function(decimalSep) {\n            if (angular.isDefined(decimalSep) && angular.isString(decimalSep)) {\n                this.decimalSep = decimalSep;\n            }\n        };\n\n        this.setThousandSep = function(thousandSep) {\n            if (angular.isDefined(thousandSep) && angular.isString(thousandSep)) {\n                this.thousandSep = thousandSep;\n            }\n        };\n\n\n    }]);\n\n\n    /**\n     * iso4217 currency by code country\n     */\n    module.factory('isoCurrencyService', [ 'isoCurrencies', 'iso4217Currencies', function( isoCurrencies, iso4217Currencies ){\n\n        var currency = isoCurrencies.getCurrency();\n\n        function _set_currency_iso4217(code) {\n            if (code) {\n                currency.code = code.toUpperCase();\n            }\n\n            var iso_currency = iso4217Currencies[currency.code];\n\n            currency.text = iso_currency.text;\n            currency.fraction = iso_currency.fraction;\n            currency.symbol = iso_currency.symbol;\n\n            return currency;\n        }\n\n        return {\n\n            /**\n             * retrieves the object holding currency.\n             *\n             * @param string code\n             * @return object\n             */\n            getCurrencyByCode: function(code) {\n\n                if (code) {\n                    _set_currency_iso4217(code);\n                }\n\n                return angular.copy(currency);\n            },\n            setCurrencyByCode: _set_currency_iso4217\n        };\n    }]);\n\n\n}(angular));\n"],"sourceRoot":"dist"}